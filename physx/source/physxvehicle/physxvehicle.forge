
for _, cc in toolsets('^cc.*') do
    cc:all {
        cc:StaticLibrary '${lib}/PhysXVehicle_${platform}_${architecture}' {
            '${lib}/PhysXFoundation_${platform}_${architecture}';
            '${lib}/PhysXPvdSDK_${platform}_${architecture}';

            cc:Cxx '${obj}/%1' {
                cxxflags = PHYSX_CXXFLAGS;
                defines = {
                    '_CRT_SECURE_NO_WARNINGS';
                };
                include_directories = {
                    physx( 'physx/source/common/src' );
                    physx( 'physx/source/foundation/include' );
                    physx( 'physx/source/geomutils/src' );
                    physx( 'physx/source/geomutils/src/ccd' );
                    physx( 'physx/source/geomutils/src/contact' );
                    physx( 'physx/source/geomutils/src/convex' );
                    physx( 'physx/source/geomutils/src/hf' );
                    physx( 'physx/source/geomutils/src/intersection' );
                    physx( 'physx/source/geomutils/src/mesh' );
                    physx( 'physx/source/geomutils/src/pcm' );
                    physx( 'physx/source/lowlevel/api/include' );
                    physx( 'physx/source/lowlevel/common/include/collision' );
                    physx( 'physx/source/lowlevel/common/include/pipeline' );
                    physx( 'physx/source/lowlevel/common/include/utils' );
                    physx( 'physx/source/lowlevel/software/include' );
                    physx( 'physx/source/physxmetadata/core/include' );
                    physx( 'physx/source/physxmetadata/extensions/include' );
                    physx( 'physx/source/physxextensions/src/serialization/Binary' );
                    physx( 'physx/source/physxextensions/src/serialization/File' );
                    physx( 'physx/source/physxextensions/src/serialization/Xml' );
                    physx( 'physx/source/pvd/include' );
                    'src';
                    'src/physxmetadata/include';
                };
                'src/VehicleUtilControl.cpp';
                'src/PxVehicleNoDrive.cpp';
                'src/PxVehicleMetaData.cpp';
                'src/PxVehicleDriveTank.cpp';
                'src/PxVehicleSuspWheelTire4.cpp';
                'src/physxmetadata/src/PxVehicleMetaDataObjects.cpp';
                'src/physxmetadata/src/PxVehicleAutoGeneratedMetaDataObjects.cpp';
                'src/PxVehicleTireFriction.cpp';
                'src/PxVehicleUpdate.cpp';
                'src/VehicleUtilTelemetry.cpp';
                'src/PxVehicleDriveNW.cpp';
                'src/PxVehicleDrive.cpp';
                'src/PxVehicleWheels.cpp';
                'src/PxVehicleDrive4W.cpp';
                'src/VehicleUtilSetup.cpp';
                'src/PxVehicleSerialization.cpp';
                'src/PxVehicleComponents.cpp';
                'src/PxVehicleSDK.cpp';
            };
        };
    };
end
